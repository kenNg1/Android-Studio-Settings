<templateSet group="MILiveTemplate">
  <template name="classcomponent" value="import React from 'react'; import {View} from 'react-native';  class $START$ extends React.Component {     static navigationOptions = {         title: null,     };      constructor(props) {     super(props);     this.state = {}     }      componentWillMount() {     }      componentDidMount() {     }      componentDidUpdate() {     }      componentWillUnmount() {     }      render() {     return (     &lt;View&gt;      &lt;/View&gt;     );     }     }      export default $START$;" description="Create the class with react component with necessary methods and state without redux" toReformat="true" toShortenFQNames="false" deactivated="true">
    <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="classcomponentwithredux" value="import React from 'react'; import {View} from 'react-native'; import {connect} from 'react-redux';  class $START$ extends React.Component {     static navigationOptions = {         title: null,     };      constructor(props) {     super(props);     this.state = {}     }      componentWillMount() {     }      componentDidMount() {     }      componentDidUpdate() {     }      componentWillUnmount() {     }      render() {     return (     &lt;View&gt;      &lt;/View&gt;     );     }     }      const mapStateToProps = state =&gt; ({});      const mapDispatchToProps = (dispatch) =&gt; ({});      export default connect(mapStateToProps, mapDispatchToProps)($START$);" description="Create the class with react component with necessary methods and state with redux" toReformat="true" toShortenFQNames="false" deactivated="true">
    <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="Flatlist" value="&lt;FlatList    onEndReached={}    onEndReachedThreshold={0.7}    ListFooterComponent={}    data={}    onRefresh={() =&gt; this.onRefresh()}    refreshing={this.state.isRefreshing}    showsVerticalScrollIndicator={false}    renderItem={(item, position) =&gt; &lt;$START$ data={{item, position}}/&gt;}    keyExtractor={(item, index) =&gt; index.toString()} /&gt;" description="Generate Flatlist" toReformat="true" toShortenFQNames="false">
    <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>